import 'package:flutter/material.dart';
import 'package:rp10_index_server/ammo_price.dart';
import 'package:charts_flutter/flutter.dart' as charts;
import 'package:rp10_index_viewer/ui/colors.dart';
import 'package:rp10_index_viewer/util/utils.dart';

class PriceSparkline extends StatelessWidget {
  final List<charts.Series<AmmoPrice, DateTime>> _seriesList;
  final bool animate;
  final DateTime first;
  final DateTime last;
  final double lastPrice;
  final bool hasOutOfStock;

  factory PriceSparkline(List<AmmoPrice> prices, {bool touchMode = false}) {
    double highPrice = 0,
        lowPrice = 1000;
    DateTime first = DateTime(3000),
        last = DateTime(0);
    bool hasOutOfStock = false;

    for (var price in prices) {
      if (price.price < lowPrice) lowPrice = price.price;
      if (price.price > highPrice) highPrice = price.price;
      if (price.time.isBefore(first)) first = price.time;
      if (price.time.isAfter(last)) last = price.time;

      if(!price.inStock) hasOutOfStock = true;
    }

    var seriesList = [
      charts.Series<AmmoPrice, DateTime>(
        data: prices,
        domainFn: (datum, _) => datum.time,
        measureFn: (datum, _) => datum.price,
        id: 'Caliber Sparkline',
        colorFn: (datum, _) => datum.inStock ? ChartColors.blueGray : ChartColors.red,
        strokeWidthPxFn: (_, __) => 1
      )
    ];

    return PriceSparkline._internal(
      seriesList, animate: false, first: first, last: last, lastPrice: prices.length > 0 ? prices.last.price : 0, hasOutOfStock: hasOutOfStock,
    );
  }

  PriceSparkline._internal(this._seriesList, {this.animate, this.first, this.last, this.lastPrice, this.hasOutOfStock});


  @override
  Widget build(BuildContext context) {
    String tooltipMessage = "Last price: \$${lastPrice?.toStringAsFixed(2)}";
    if(hasOutOfStock) {
      tooltipMessage += ". Red segments indicate data generated by the Gunbroker Rule.";
    }

    return Tooltip(
      message: tooltipMessage,
      child: charts.TimeSeriesChart(
        _seriesList,
        animate: animate,
        primaryMeasureAxis: charts.AxisSpec(
            renderSpec: charts.NoneRenderSpec<num>()
        ),
        domainAxis: charts.DateTimeAxisSpec(
          viewport: charts.DateTimeExtents(
            start: Utilities.getExtentStart(first, last),
            end: last,
          ),
          showAxisLine: true,
          renderSpec: charts.NoneRenderSpec<DateTime>()
        ),
      ),
    );
  }
}